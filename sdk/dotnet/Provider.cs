// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Threefold
{
    [ThreefoldResourceType("pulumi:providers:threefold")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The key type registered on substrate (ed25519 or sr25519).
        /// </summary>
        [Output("key_type")]
        public Output<string?> Key_type { get; private set; } = null!;

        /// <summary>
        /// The mnemonic of the user. It is very secret.
        /// </summary>
        [Output("mnemonic")]
        public Output<string?> Mnemonic { get; private set; } = null!;

        /// <summary>
        /// The network to deploy on.
        /// </summary>
        [Output("network")]
        public Output<string?> Network { get; private set; } = null!;

        /// <summary>
        /// The relay url, example: wss://relay.dev.grid.tf
        /// </summary>
        [Output("relay_url")]
        public Output<string?> Relay_url { get; private set; } = null!;

        /// <summary>
        /// The timeout duration in seconds for rmb calls
        /// </summary>
        [Output("rmb_timeout")]
        public Output<string?> Rmb_timeout { get; private set; } = null!;

        /// <summary>
        /// The substrate url, example: wss://tfchain.dev.grid.tf/ws
        /// </summary>
        [Output("substrate_url")]
        public Output<string?> Substrate_url { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("threefold", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "mnemonic",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key type registered on substrate (ed25519 or sr25519).
        /// </summary>
        [Input("key_type")]
        public Input<string>? Key_type { get; set; }

        [Input("mnemonic")]
        private Input<string>? _mnemonic;

        /// <summary>
        /// The mnemonic of the user. It is very secret.
        /// </summary>
        public Input<string>? Mnemonic
        {
            get => _mnemonic;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _mnemonic = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The network to deploy on.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The relay url, example: wss://relay.dev.grid.tf
        /// </summary>
        [Input("relay_url")]
        public Input<string>? Relay_url { get; set; }

        /// <summary>
        /// The timeout duration in seconds for rmb calls
        /// </summary>
        [Input("rmb_timeout")]
        public Input<string>? Rmb_timeout { get; set; }

        /// <summary>
        /// The substrate url, example: wss://tfchain.dev.grid.tf/ws
        /// </summary>
        [Input("substrate_url")]
        public Input<string>? Substrate_url { get; set; }

        public ProviderArgs()
        {
            Key_type = Utilities.GetEnv("") ?? "sr25519";
            Mnemonic = Utilities.GetEnv("") ?? "";
            Network = Utilities.GetEnv("") ?? "";
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
