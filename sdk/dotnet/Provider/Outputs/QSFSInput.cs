// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Threefold.Provider.Outputs
{

    [OutputType]
    public sealed class QSFSInput
    {
        public readonly int Cache;
        public readonly string? Compression_algorithm;
        public readonly string? Description;
        public readonly string? Encryption_algorithm;
        public readonly string Encryption_key;
        public readonly int Expected_shards;
        public readonly ImmutableArray<Outputs.Group> Groups;
        public readonly int Max_zdb_data_dir_size;
        public readonly Outputs.Metadata Metadata;
        public readonly int Minimal_shards;
        public readonly string Name;
        public readonly int Redundant_groups;
        public readonly int Redundant_nodes;

        [OutputConstructor]
        private QSFSInput(
            int cache,

            string? compression_algorithm,

            string? description,

            string? encryption_algorithm,

            string encryption_key,

            int expected_shards,

            ImmutableArray<Outputs.Group> groups,

            int max_zdb_data_dir_size,

            Outputs.Metadata metadata,

            int minimal_shards,

            string name,

            int redundant_groups,

            int redundant_nodes)
        {
            Cache = cache;
            Compression_algorithm = compression_algorithm;
            Description = description;
            Encryption_algorithm = encryption_algorithm;
            Encryption_key = encryption_key;
            Expected_shards = expected_shards;
            Groups = groups;
            Max_zdb_data_dir_size = max_zdb_data_dir_size;
            Metadata = metadata;
            Minimal_shards = minimal_shards;
            Name = name;
            Redundant_groups = redundant_groups;
            Redundant_nodes = redundant_nodes;
        }
    }
}
