# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Backend',
    'Disk',
    'Group',
    'K8sNodeComputed',
    'K8sNodeInput',
    'Metadata',
    'Mount',
    'QSFSComputed',
    'QSFSInput',
    'VMComputed',
    'VMInput',
    'ZDBComputed',
    'ZDBInput',
    'Zlog',
]

@pulumi.output_type
class Backend(dict):
    def __init__(__self__, *,
                 address: str,
                 namespace: str,
                 password: str):
        Backend._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            namespace=namespace,
            password=password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             namespace: str,
             password: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("namespace", namespace)
        _setter("password", password)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class Disk(dict):
    def __init__(__self__, *,
                 name: str,
                 size: int,
                 description: Optional[str] = None):
        Disk._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            size=size,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             size: int,
             description: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("size", size)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class Group(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence['outputs.Backend']] = None):
        Group._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backends=backends,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backends: Optional[Sequence['outputs.Backend']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if backends is not None:
            _setter("backends", backends)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.Backend']]:
        return pulumi.get(self, "backends")


@pulumi.output_type
class K8sNodeComputed(dict):
    def __init__(__self__, *,
                 computed_ip: str,
                 computed_ip6: str,
                 console_url: str,
                 ip: str,
                 network_name: str,
                 ssh_key: str,
                 token: str,
                 ygg_ip: str):
        K8sNodeComputed._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computed_ip=computed_ip,
            computed_ip6=computed_ip6,
            console_url=console_url,
            ip=ip,
            network_name=network_name,
            ssh_key=ssh_key,
            token=token,
            ygg_ip=ygg_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computed_ip: str,
             computed_ip6: str,
             console_url: str,
             ip: str,
             network_name: str,
             ssh_key: str,
             token: str,
             ygg_ip: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computed_ip", computed_ip)
        _setter("computed_ip6", computed_ip6)
        _setter("console_url", console_url)
        _setter("ip", ip)
        _setter("network_name", network_name)
        _setter("ssh_key", ssh_key)
        _setter("token", token)
        _setter("ygg_ip", ygg_ip)

    @property
    @pulumi.getter
    def computed_ip(self) -> str:
        return pulumi.get(self, "computed_ip")

    @property
    @pulumi.getter
    def computed_ip6(self) -> str:
        return pulumi.get(self, "computed_ip6")

    @property
    @pulumi.getter
    def console_url(self) -> str:
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter
    def ssh_key(self) -> str:
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def ygg_ip(self) -> str:
        return pulumi.get(self, "ygg_ip")


@pulumi.output_type
class K8sNodeInput(dict):
    def __init__(__self__, *,
                 cpu: int,
                 disk_size: int,
                 memory: int,
                 name: str,
                 node: Any,
                 flist: Optional[str] = None,
                 flist_checksum: Optional[str] = None,
                 planetary: Optional[bool] = None,
                 public_ip: Optional[bool] = None,
                 public_ip6: Optional[bool] = None):
        K8sNodeInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu=cpu,
            disk_size=disk_size,
            memory=memory,
            name=name,
            node=node,
            flist=flist,
            flist_checksum=flist_checksum,
            planetary=planetary,
            public_ip=public_ip,
            public_ip6=public_ip6,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu: int,
             disk_size: int,
             memory: int,
             name: str,
             node: Any,
             flist: Optional[str] = None,
             flist_checksum: Optional[str] = None,
             planetary: Optional[bool] = None,
             public_ip: Optional[bool] = None,
             public_ip6: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cpu", cpu)
        _setter("disk_size", disk_size)
        _setter("memory", memory)
        _setter("name", name)
        _setter("node", node)
        if flist is not None:
            _setter("flist", flist)
        if flist_checksum is not None:
            _setter("flist_checksum", flist_checksum)
        if planetary is not None:
            _setter("planetary", planetary)
        if public_ip is not None:
            _setter("public_ip", public_ip)
        if public_ip6 is not None:
            _setter("public_ip6", public_ip6)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def node(self) -> Any:
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def flist(self) -> Optional[str]:
        return pulumi.get(self, "flist")

    @property
    @pulumi.getter
    def flist_checksum(self) -> Optional[str]:
        return pulumi.get(self, "flist_checksum")

    @property
    @pulumi.getter
    def planetary(self) -> Optional[bool]:
        return pulumi.get(self, "planetary")

    @property
    @pulumi.getter
    def public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def public_ip6(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip6")


@pulumi.output_type
class Metadata(dict):
    def __init__(__self__, *,
                 encryption_key: str,
                 prefix: str,
                 backends: Optional[Sequence['outputs.Backend']] = None,
                 encryption_algorithm: Optional[str] = None,
                 type: Optional[str] = None):
        Metadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_key=encryption_key,
            prefix=prefix,
            backends=backends,
            encryption_algorithm=encryption_algorithm,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_key: str,
             prefix: str,
             backends: Optional[Sequence['outputs.Backend']] = None,
             encryption_algorithm: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("encryption_key", encryption_key)
        _setter("prefix", prefix)
        if backends is not None:
            _setter("backends", backends)
        if encryption_algorithm is not None:
            _setter("encryption_algorithm", encryption_algorithm)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def encryption_key(self) -> str:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence['outputs.Backend']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class Mount(dict):
    def __init__(__self__, *,
                 disk_name: str,
                 mount_point: str):
        Mount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_name=disk_name,
            mount_point=mount_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_name: str,
             mount_point: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_name", disk_name)
        _setter("mount_point", mount_point)

    @property
    @pulumi.getter
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter
    def mount_point(self) -> str:
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class QSFSComputed(dict):
    def __init__(__self__, *,
                 metrics_endpoint: str):
        QSFSComputed._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metrics_endpoint=metrics_endpoint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metrics_endpoint: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("metrics_endpoint", metrics_endpoint)

    @property
    @pulumi.getter
    def metrics_endpoint(self) -> str:
        return pulumi.get(self, "metrics_endpoint")


@pulumi.output_type
class QSFSInput(dict):
    def __init__(__self__, *,
                 cache: int,
                 encryption_key: str,
                 expected_shards: int,
                 groups: Sequence['outputs.Group'],
                 max_zdb_data_dir_size: int,
                 metadata: 'outputs.Metadata',
                 minimal_shards: int,
                 name: str,
                 redundant_groups: int,
                 redundant_nodes: int,
                 compression_algorithm: Optional[str] = None,
                 description: Optional[str] = None,
                 encryption_algorithm: Optional[str] = None):
        QSFSInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cache=cache,
            encryption_key=encryption_key,
            expected_shards=expected_shards,
            groups=groups,
            max_zdb_data_dir_size=max_zdb_data_dir_size,
            metadata=metadata,
            minimal_shards=minimal_shards,
            name=name,
            redundant_groups=redundant_groups,
            redundant_nodes=redundant_nodes,
            compression_algorithm=compression_algorithm,
            description=description,
            encryption_algorithm=encryption_algorithm,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cache: int,
             encryption_key: str,
             expected_shards: int,
             groups: Sequence['outputs.Group'],
             max_zdb_data_dir_size: int,
             metadata: 'outputs.Metadata',
             minimal_shards: int,
             name: str,
             redundant_groups: int,
             redundant_nodes: int,
             compression_algorithm: Optional[str] = None,
             description: Optional[str] = None,
             encryption_algorithm: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cache", cache)
        _setter("encryption_key", encryption_key)
        _setter("expected_shards", expected_shards)
        _setter("groups", groups)
        _setter("max_zdb_data_dir_size", max_zdb_data_dir_size)
        _setter("metadata", metadata)
        _setter("minimal_shards", minimal_shards)
        _setter("name", name)
        _setter("redundant_groups", redundant_groups)
        _setter("redundant_nodes", redundant_nodes)
        if compression_algorithm is not None:
            _setter("compression_algorithm", compression_algorithm)
        if description is not None:
            _setter("description", description)
        if encryption_algorithm is not None:
            _setter("encryption_algorithm", encryption_algorithm)

    @property
    @pulumi.getter
    def cache(self) -> int:
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter
    def encryption_key(self) -> str:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter
    def expected_shards(self) -> int:
        return pulumi.get(self, "expected_shards")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.Group']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def max_zdb_data_dir_size(self) -> int:
        return pulumi.get(self, "max_zdb_data_dir_size")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.Metadata':
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def minimal_shards(self) -> int:
        return pulumi.get(self, "minimal_shards")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def redundant_groups(self) -> int:
        return pulumi.get(self, "redundant_groups")

    @property
    @pulumi.getter
    def redundant_nodes(self) -> int:
        return pulumi.get(self, "redundant_nodes")

    @property
    @pulumi.getter
    def compression_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "compression_algorithm")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "encryption_algorithm")


@pulumi.output_type
class VMComputed(dict):
    def __init__(__self__, *,
                 computed_ip: str,
                 computed_ip6: str,
                 console_url: str,
                 ygg_ip: str,
                 ip: Optional[str] = None):
        VMComputed._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computed_ip=computed_ip,
            computed_ip6=computed_ip6,
            console_url=console_url,
            ygg_ip=ygg_ip,
            ip=ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computed_ip: str,
             computed_ip6: str,
             console_url: str,
             ygg_ip: str,
             ip: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computed_ip", computed_ip)
        _setter("computed_ip6", computed_ip6)
        _setter("console_url", console_url)
        _setter("ygg_ip", ygg_ip)
        if ip is not None:
            _setter("ip", ip)

    @property
    @pulumi.getter
    def computed_ip(self) -> str:
        return pulumi.get(self, "computed_ip")

    @property
    @pulumi.getter
    def computed_ip6(self) -> str:
        return pulumi.get(self, "computed_ip6")

    @property
    @pulumi.getter
    def console_url(self) -> str:
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter
    def ygg_ip(self) -> str:
        return pulumi.get(self, "ygg_ip")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class VMInput(dict):
    def __init__(__self__, *,
                 cpu: int,
                 flist: str,
                 memory: int,
                 name: str,
                 network_name: str,
                 description: Optional[str] = None,
                 entrypoint: Optional[str] = None,
                 env_vars: Optional[Mapping[str, str]] = None,
                 flist_checksum: Optional[str] = None,
                 gpus: Optional[Sequence[str]] = None,
                 mounts: Optional[Sequence['outputs.Mount']] = None,
                 planetary: Optional[bool] = None,
                 public_ip: Optional[bool] = None,
                 public_ip6: Optional[bool] = None,
                 rootfs_size: Optional[int] = None,
                 zlogs: Optional[Sequence['outputs.Zlog']] = None):
        VMInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu=cpu,
            flist=flist,
            memory=memory,
            name=name,
            network_name=network_name,
            description=description,
            entrypoint=entrypoint,
            env_vars=env_vars,
            flist_checksum=flist_checksum,
            gpus=gpus,
            mounts=mounts,
            planetary=planetary,
            public_ip=public_ip,
            public_ip6=public_ip6,
            rootfs_size=rootfs_size,
            zlogs=zlogs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu: int,
             flist: str,
             memory: int,
             name: str,
             network_name: str,
             description: Optional[str] = None,
             entrypoint: Optional[str] = None,
             env_vars: Optional[Mapping[str, str]] = None,
             flist_checksum: Optional[str] = None,
             gpus: Optional[Sequence[str]] = None,
             mounts: Optional[Sequence['outputs.Mount']] = None,
             planetary: Optional[bool] = None,
             public_ip: Optional[bool] = None,
             public_ip6: Optional[bool] = None,
             rootfs_size: Optional[int] = None,
             zlogs: Optional[Sequence['outputs.Zlog']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cpu", cpu)
        _setter("flist", flist)
        _setter("memory", memory)
        _setter("name", name)
        _setter("network_name", network_name)
        if description is not None:
            _setter("description", description)
        if entrypoint is not None:
            _setter("entrypoint", entrypoint)
        if env_vars is not None:
            _setter("env_vars", env_vars)
        if flist_checksum is not None:
            _setter("flist_checksum", flist_checksum)
        if gpus is not None:
            _setter("gpus", gpus)
        if mounts is not None:
            _setter("mounts", mounts)
        if planetary is not None:
            _setter("planetary", planetary)
        if public_ip is not None:
            _setter("public_ip", public_ip)
        if public_ip6 is not None:
            _setter("public_ip6", public_ip6)
        if rootfs_size is not None:
            _setter("rootfs_size", rootfs_size)
        if zlogs is not None:
            _setter("zlogs", zlogs)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def flist(self) -> str:
        return pulumi.get(self, "flist")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entrypoint(self) -> Optional[str]:
        return pulumi.get(self, "entrypoint")

    @property
    @pulumi.getter
    def env_vars(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "env_vars")

    @property
    @pulumi.getter
    def flist_checksum(self) -> Optional[str]:
        return pulumi.get(self, "flist_checksum")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def mounts(self) -> Optional[Sequence['outputs.Mount']]:
        return pulumi.get(self, "mounts")

    @property
    @pulumi.getter
    def planetary(self) -> Optional[bool]:
        return pulumi.get(self, "planetary")

    @property
    @pulumi.getter
    def public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def public_ip6(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip6")

    @property
    @pulumi.getter
    def rootfs_size(self) -> Optional[int]:
        return pulumi.get(self, "rootfs_size")

    @property
    @pulumi.getter
    def zlogs(self) -> Optional[Sequence['outputs.Zlog']]:
        return pulumi.get(self, "zlogs")


@pulumi.output_type
class ZDBComputed(dict):
    def __init__(__self__, *,
                 ips: Sequence[str],
                 namespace: str,
                 port: int):
        ZDBComputed._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ips=ips,
            namespace=namespace,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ips: Sequence[str],
             namespace: str,
             port: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ips", ips)
        _setter("namespace", namespace)
        _setter("port", port)

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class ZDBInput(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 size: int,
                 description: Optional[str] = None,
                 mode: Optional[str] = None,
                 public: Optional[bool] = None):
        ZDBInput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            password=password,
            size=size,
            description=description,
            mode=mode,
            public=public,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             password: str,
             size: int,
             description: Optional[str] = None,
             mode: Optional[str] = None,
             public: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("password", password)
        _setter("size", size)
        if description is not None:
            _setter("description", description)
        if mode is None:
            mode = (_utilities.get_env('') or 'user')
        if mode is not None:
            _setter("mode", mode)
        if public is not None:
            _setter("public", public)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        return pulumi.get(self, "public")


@pulumi.output_type
class Zlog(dict):
    def __init__(__self__, *,
                 output: str,
                 zmachine: str):
        Zlog._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            output=output,
            zmachine=zmachine,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             output: str,
             zmachine: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("output", output)
        _setter("zmachine", zmachine)

    @property
    @pulumi.getter
    def output(self) -> str:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def zmachine(self) -> str:
        return pulumi.get(self, "zmachine")


