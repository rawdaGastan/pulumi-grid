// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Scheduler extends pulumi.CustomResource {
    /**
     * Get an existing Scheduler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Scheduler {
        return new Scheduler(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'threefold:provider:Scheduler';

    /**
     * Returns true if the given object is an instance of Scheduler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Scheduler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Scheduler.__pulumiType;
    }

    public readonly certification_type!: pulumi.Output<string | undefined>;
    public readonly city!: pulumi.Output<string | undefined>;
    public readonly country!: pulumi.Output<string | undefined>;
    public readonly dedicated!: pulumi.Output<boolean | undefined>;
    public readonly domain!: pulumi.Output<boolean | undefined>;
    public readonly farm_ids!: pulumi.Output<number[] | undefined>;
    public readonly farm_name!: pulumi.Output<string | undefined>;
    public readonly free_ips!: pulumi.Output<number | undefined>;
    public readonly gpu_available!: pulumi.Output<boolean | undefined>;
    public readonly gpu_device_id!: pulumi.Output<string | undefined>;
    public readonly gpu_device_name!: pulumi.Output<string | undefined>;
    public readonly gpu_vendor_id!: pulumi.Output<string | undefined>;
    public readonly gpu_vendor_name!: pulumi.Output<string | undefined>;
    public readonly has_gpu!: pulumi.Output<boolean | undefined>;
    public readonly hru!: pulumi.Output<number | undefined>;
    public readonly ipv4!: pulumi.Output<boolean | undefined>;
    public readonly ipv6!: pulumi.Output<boolean | undefined>;
    public readonly mru!: pulumi.Output<number | undefined>;
    public readonly node_id!: pulumi.Output<number | undefined>;
    public /*out*/ readonly nodes!: pulumi.Output<number[]>;
    public readonly rentable!: pulumi.Output<boolean | undefined>;
    public readonly rented!: pulumi.Output<boolean | undefined>;
    public readonly sru!: pulumi.Output<number | undefined>;
    public readonly twin_id!: pulumi.Output<number | undefined>;

    /**
     * Create a Scheduler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SchedulerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["certification_type"] = args ? args.certification_type : undefined;
            resourceInputs["city"] = args ? args.city : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["dedicated"] = args ? args.dedicated : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["farm_ids"] = args ? args.farm_ids : undefined;
            resourceInputs["farm_name"] = args ? args.farm_name : undefined;
            resourceInputs["free_ips"] = args ? args.free_ips : undefined;
            resourceInputs["gpu_available"] = args ? args.gpu_available : undefined;
            resourceInputs["gpu_device_id"] = args ? args.gpu_device_id : undefined;
            resourceInputs["gpu_device_name"] = args ? args.gpu_device_name : undefined;
            resourceInputs["gpu_vendor_id"] = args ? args.gpu_vendor_id : undefined;
            resourceInputs["gpu_vendor_name"] = args ? args.gpu_vendor_name : undefined;
            resourceInputs["has_gpu"] = args ? args.has_gpu : undefined;
            resourceInputs["hru"] = args ? args.hru : undefined;
            resourceInputs["ipv4"] = args ? args.ipv4 : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["mru"] = args ? args.mru : undefined;
            resourceInputs["node_id"] = args ? args.node_id : undefined;
            resourceInputs["rentable"] = args ? args.rentable : undefined;
            resourceInputs["rented"] = args ? args.rented : undefined;
            resourceInputs["sru"] = args ? args.sru : undefined;
            resourceInputs["twin_id"] = args ? args.twin_id : undefined;
            resourceInputs["nodes"] = undefined /*out*/;
        } else {
            resourceInputs["certification_type"] = undefined /*out*/;
            resourceInputs["city"] = undefined /*out*/;
            resourceInputs["country"] = undefined /*out*/;
            resourceInputs["dedicated"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["farm_ids"] = undefined /*out*/;
            resourceInputs["farm_name"] = undefined /*out*/;
            resourceInputs["free_ips"] = undefined /*out*/;
            resourceInputs["gpu_available"] = undefined /*out*/;
            resourceInputs["gpu_device_id"] = undefined /*out*/;
            resourceInputs["gpu_device_name"] = undefined /*out*/;
            resourceInputs["gpu_vendor_id"] = undefined /*out*/;
            resourceInputs["gpu_vendor_name"] = undefined /*out*/;
            resourceInputs["has_gpu"] = undefined /*out*/;
            resourceInputs["hru"] = undefined /*out*/;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["ipv6"] = undefined /*out*/;
            resourceInputs["mru"] = undefined /*out*/;
            resourceInputs["node_id"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["rentable"] = undefined /*out*/;
            resourceInputs["rented"] = undefined /*out*/;
            resourceInputs["sru"] = undefined /*out*/;
            resourceInputs["twin_id"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Scheduler.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Scheduler resource.
 */
export interface SchedulerArgs {
    certification_type?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    dedicated?: pulumi.Input<boolean>;
    domain?: pulumi.Input<boolean>;
    farm_ids?: pulumi.Input<pulumi.Input<number>[]>;
    farm_name?: pulumi.Input<string>;
    free_ips?: pulumi.Input<number>;
    gpu_available?: pulumi.Input<boolean>;
    gpu_device_id?: pulumi.Input<string>;
    gpu_device_name?: pulumi.Input<string>;
    gpu_vendor_id?: pulumi.Input<string>;
    gpu_vendor_name?: pulumi.Input<string>;
    has_gpu?: pulumi.Input<boolean>;
    hru?: pulumi.Input<number>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    mru?: pulumi.Input<number>;
    node_id?: pulumi.Input<number>;
    rentable?: pulumi.Input<boolean>;
    rented?: pulumi.Input<boolean>;
    sru?: pulumi.Input<number>;
    twin_id?: pulumi.Input<number>;
}
