// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grid:provider:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    public /*out*/ readonly contract_id!: pulumi.Output<number>;
    public readonly disks!: pulumi.Output<outputs.provider.Disk[] | undefined>;
    public /*out*/ readonly ip_range!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly network_name!: pulumi.Output<string | undefined>;
    public /*out*/ readonly node_deployment_id!: pulumi.Output<{[key: string]: number}>;
    public readonly node_id!: pulumi.Output<any>;
    public readonly qsfs!: pulumi.Output<outputs.provider.QSFSInput[] | undefined>;
    public /*out*/ readonly qsfs_computed!: pulumi.Output<outputs.provider.QSFSComputed[]>;
    public readonly solution_provider!: pulumi.Output<number | undefined>;
    public readonly solution_type!: pulumi.Output<string | undefined>;
    public readonly vms!: pulumi.Output<outputs.provider.VMInput[] | undefined>;
    public /*out*/ readonly vms_computed!: pulumi.Output<outputs.provider.VMComputed[]>;
    public readonly zdbs!: pulumi.Output<outputs.provider.ZDBInput[] | undefined>;
    public /*out*/ readonly zdbs_computed!: pulumi.Output<outputs.provider.ZDBComputed[]>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.node_id === undefined) && !opts.urn) {
                throw new Error("Missing required property 'node_id'");
            }
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network_name"] = args ? args.network_name : undefined;
            resourceInputs["node_id"] = args ? args.node_id : undefined;
            resourceInputs["qsfs"] = args ? args.qsfs : undefined;
            resourceInputs["solution_provider"] = args ? args.solution_provider : undefined;
            resourceInputs["solution_type"] = args ? args.solution_type : undefined;
            resourceInputs["vms"] = args ? args.vms : undefined;
            resourceInputs["zdbs"] = args ? args.zdbs : undefined;
            resourceInputs["contract_id"] = undefined /*out*/;
            resourceInputs["ip_range"] = undefined /*out*/;
            resourceInputs["node_deployment_id"] = undefined /*out*/;
            resourceInputs["qsfs_computed"] = undefined /*out*/;
            resourceInputs["vms_computed"] = undefined /*out*/;
            resourceInputs["zdbs_computed"] = undefined /*out*/;
        } else {
            resourceInputs["contract_id"] = undefined /*out*/;
            resourceInputs["disks"] = undefined /*out*/;
            resourceInputs["ip_range"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["network_name"] = undefined /*out*/;
            resourceInputs["node_deployment_id"] = undefined /*out*/;
            resourceInputs["node_id"] = undefined /*out*/;
            resourceInputs["qsfs"] = undefined /*out*/;
            resourceInputs["qsfs_computed"] = undefined /*out*/;
            resourceInputs["solution_provider"] = undefined /*out*/;
            resourceInputs["solution_type"] = undefined /*out*/;
            resourceInputs["vms"] = undefined /*out*/;
            resourceInputs["vms_computed"] = undefined /*out*/;
            resourceInputs["zdbs"] = undefined /*out*/;
            resourceInputs["zdbs_computed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    disks?: pulumi.Input<pulumi.Input<inputs.provider.DiskArgs>[]>;
    name: pulumi.Input<string>;
    network_name?: pulumi.Input<string>;
    node_id: any;
    qsfs?: pulumi.Input<pulumi.Input<inputs.provider.QSFSInputArgs>[]>;
    solution_provider?: pulumi.Input<number>;
    solution_type?: pulumi.Input<string>;
    vms?: pulumi.Input<pulumi.Input<inputs.provider.VMInputArgs>[]>;
    zdbs?: pulumi.Input<pulumi.Input<inputs.provider.ZDBInputArgs>[]>;
}
