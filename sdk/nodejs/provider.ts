// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'threefold';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The key type registered on substrate (ed25519 or sr25519).
     */
    public readonly key_type!: pulumi.Output<string | undefined>;
    /**
     * The mnemonic of the user. It is very secret.
     */
    public readonly mnemonic!: pulumi.Output<string | undefined>;
    /**
     * The network to deploy on.
     */
    public readonly network!: pulumi.Output<string | undefined>;
    /**
     * The timeout duration in seconds for rmb calls
     */
    public readonly rmb_timeout!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["graphql_url"] = pulumi.output(args ? args.graphql_url : undefined).apply(JSON.stringify);
            resourceInputs["key_type"] = (args ? args.key_type : undefined) ?? (utilities.getEnv("") || "sr25519");
            resourceInputs["mnemonic"] = (args?.mnemonic ? pulumi.secret(args.mnemonic) : undefined) ?? (utilities.getEnv("") || "");
            resourceInputs["network"] = (args ? args.network : undefined) ?? (utilities.getEnv("") || "");
            resourceInputs["proxy_url"] = pulumi.output(args ? args.proxy_url : undefined).apply(JSON.stringify);
            resourceInputs["relay_url"] = pulumi.output(args ? args.relay_url : undefined).apply(JSON.stringify);
            resourceInputs["rmb_timeout"] = args ? args.rmb_timeout : undefined;
            resourceInputs["substrate_url"] = pulumi.output(args ? args.substrate_url : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["mnemonic"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The graphql urls, example: https://graphql.grid.tf/graphql
     */
    graphql_url?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key type registered on substrate (ed25519 or sr25519).
     */
    key_type?: pulumi.Input<string>;
    /**
     * The mnemonic of the user. It is very secret.
     */
    mnemonic?: pulumi.Input<string>;
    /**
     * The network to deploy on.
     */
    network?: pulumi.Input<string>;
    /**
     * The proxy urls, example: https://gridproxy.grid.tf/
     */
    proxy_url?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The relay urls, example: wss://relay.grid.tf
     */
    relay_url?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timeout duration in seconds for rmb calls
     */
    rmb_timeout?: pulumi.Input<string>;
    /**
     * The substrate url, example: wss://tfchain.grid.tf/ws
     */
    substrate_url?: pulumi.Input<pulumi.Input<string>[]>;
}
