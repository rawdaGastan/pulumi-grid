// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threefold

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/threefoldtech/pulumi-threefold/sdk/go/threefold/internal"
)

type Deployment struct {
	pulumi.CustomResourceState

	// The deployment ID
	Contract_id pulumi.IntOutput `pulumi:"contract_id"`
	// The disks requested to be included in the deployment
	Disks DiskArrayOutput `pulumi:"disks"`
	// IP range of the node for the wireguard network (e.g. 10.1.2.0/24). Has to have a subnet mask of 24
	Ip_range pulumi.StringOutput `pulumi:"ip_range"`
	// The name of the deployment, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
	Network_name pulumi.StringPtrOutput `pulumi:"network_name"`
	// Mapping from each node to its deployment ID
	Node_deployment_id pulumi.IntMapOutput `pulumi:"node_deployment_id"`
	// The node ID to deploy on, required and should match the requested resources
	Node_id pulumi.AnyOutput `pulumi:"node_id"`
	// The qsfs output instances requested to be included in the deployment
	Qsfs          QSFSInputArrayOutput    `pulumi:"qsfs"`
	Qsfs_computed QSFSComputedArrayOutput `pulumi:"qsfs_computed"`
	// ID for the deployed solution which allows the creator of the solution to gain a percentage of the rewards
	Solution_provider pulumi.IntPtrOutput `pulumi:"solution_provider"`
	// The name of the solution for created contract to be consistent across threefold tooling (project name in deployment metadata)
	Solution_type pulumi.StringPtrOutput `pulumi:"solution_type"`
	// The vms output requested to be included in the deployment
	Vms          VMInputArrayOutput    `pulumi:"vms"`
	Vms_computed VMComputedArrayOutput `pulumi:"vms_computed"`
	// The zdbs output requested to be included in the deployment
	Zdbs          ZDBInputArrayOutput    `pulumi:"zdbs"`
	Zdbs_computed ZDBComputedArrayOutput `pulumi:"zdbs_computed"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Node_id == nil {
		return nil, errors.New("invalid value for required argument 'Node_id'")
	}
	if args.Solution_type == nil {
		args.Solution_type = pulumi.StringPtr("vm/")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deployment
	err := ctx.RegisterResource("threefold:index:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("threefold:index:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
}

type DeploymentState struct {
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// The disks requested to be included in the deployment
	Disks []Disk `pulumi:"disks"`
	// The name of the deployment, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
	Name string `pulumi:"name"`
	// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
	Network_name *string `pulumi:"network_name"`
	// The node ID to deploy on, required and should match the requested resources
	Node_id interface{} `pulumi:"node_id"`
	// The qsfs instances requested to be included in the deployment
	Qsfs []QSFSInput `pulumi:"qsfs"`
	// ID for the deployed solution which allows the creator of the solution to gain a percentage of the rewards
	Solution_provider *int `pulumi:"solution_provider"`
	// The name of the solution for created contract to be consistent across threefold tooling (project name in deployment metadata)
	Solution_type *string `pulumi:"solution_type"`
	// The vms requested to be included in the deployment
	Vms []VMInput `pulumi:"vms"`
	// The zdbs requested to be included in the deployment
	Zdbs []ZDBInput `pulumi:"zdbs"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// The disks requested to be included in the deployment
	Disks DiskArrayInput
	// The name of the deployment, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
	Name pulumi.StringInput
	// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
	Network_name pulumi.StringPtrInput
	// The node ID to deploy on, required and should match the requested resources
	Node_id pulumi.Input
	// The qsfs instances requested to be included in the deployment
	Qsfs QSFSInputArrayInput
	// ID for the deployed solution which allows the creator of the solution to gain a percentage of the rewards
	Solution_provider pulumi.IntPtrInput
	// The name of the solution for created contract to be consistent across threefold tooling (project name in deployment metadata)
	Solution_type pulumi.StringPtrInput
	// The vms requested to be included in the deployment
	Vms VMInputArrayInput
	// The zdbs requested to be included in the deployment
	Zdbs ZDBInputArrayInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

// DeploymentArrayInput is an input type that accepts DeploymentArray and DeploymentArrayOutput values.
// You can construct a concrete instance of `DeploymentArrayInput` via:
//
//	DeploymentArray{ DeploymentArgs{...} }
type DeploymentArrayInput interface {
	pulumi.Input

	ToDeploymentArrayOutput() DeploymentArrayOutput
	ToDeploymentArrayOutputWithContext(context.Context) DeploymentArrayOutput
}

type DeploymentArray []DeploymentInput

func (DeploymentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (i DeploymentArray) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return i.ToDeploymentArrayOutputWithContext(context.Background())
}

func (i DeploymentArray) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentArrayOutput)
}

// DeploymentMapInput is an input type that accepts DeploymentMap and DeploymentMapOutput values.
// You can construct a concrete instance of `DeploymentMapInput` via:
//
//	DeploymentMap{ "key": DeploymentArgs{...} }
type DeploymentMapInput interface {
	pulumi.Input

	ToDeploymentMapOutput() DeploymentMapOutput
	ToDeploymentMapOutputWithContext(context.Context) DeploymentMapOutput
}

type DeploymentMap map[string]DeploymentInput

func (DeploymentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (i DeploymentMap) ToDeploymentMapOutput() DeploymentMapOutput {
	return i.ToDeploymentMapOutputWithContext(context.Background())
}

func (i DeploymentMap) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentMapOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// The deployment ID
func (o DeploymentOutput) Contract_id() pulumi.IntOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntOutput { return v.Contract_id }).(pulumi.IntOutput)
}

// The disks requested to be included in the deployment
func (o DeploymentOutput) Disks() DiskArrayOutput {
	return o.ApplyT(func(v *Deployment) DiskArrayOutput { return v.Disks }).(DiskArrayOutput)
}

// IP range of the node for the wireguard network (e.g. 10.1.2.0/24). Has to have a subnet mask of 24
func (o DeploymentOutput) Ip_range() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Ip_range }).(pulumi.StringOutput)
}

// The name of the deployment, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
func (o DeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
func (o DeploymentOutput) Network_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.Network_name }).(pulumi.StringPtrOutput)
}

// Mapping from each node to its deployment ID
func (o DeploymentOutput) Node_deployment_id() pulumi.IntMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntMapOutput { return v.Node_deployment_id }).(pulumi.IntMapOutput)
}

// The node ID to deploy on, required and should match the requested resources
func (o DeploymentOutput) Node_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *Deployment) pulumi.AnyOutput { return v.Node_id }).(pulumi.AnyOutput)
}

// The qsfs output instances requested to be included in the deployment
func (o DeploymentOutput) Qsfs() QSFSInputArrayOutput {
	return o.ApplyT(func(v *Deployment) QSFSInputArrayOutput { return v.Qsfs }).(QSFSInputArrayOutput)
}

func (o DeploymentOutput) Qsfs_computed() QSFSComputedArrayOutput {
	return o.ApplyT(func(v *Deployment) QSFSComputedArrayOutput { return v.Qsfs_computed }).(QSFSComputedArrayOutput)
}

// ID for the deployed solution which allows the creator of the solution to gain a percentage of the rewards
func (o DeploymentOutput) Solution_provider() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.IntPtrOutput { return v.Solution_provider }).(pulumi.IntPtrOutput)
}

// The name of the solution for created contract to be consistent across threefold tooling (project name in deployment metadata)
func (o DeploymentOutput) Solution_type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringPtrOutput { return v.Solution_type }).(pulumi.StringPtrOutput)
}

// The vms output requested to be included in the deployment
func (o DeploymentOutput) Vms() VMInputArrayOutput {
	return o.ApplyT(func(v *Deployment) VMInputArrayOutput { return v.Vms }).(VMInputArrayOutput)
}

func (o DeploymentOutput) Vms_computed() VMComputedArrayOutput {
	return o.ApplyT(func(v *Deployment) VMComputedArrayOutput { return v.Vms_computed }).(VMComputedArrayOutput)
}

// The zdbs output requested to be included in the deployment
func (o DeploymentOutput) Zdbs() ZDBInputArrayOutput {
	return o.ApplyT(func(v *Deployment) ZDBInputArrayOutput { return v.Zdbs }).(ZDBInputArrayOutput)
}

func (o DeploymentOutput) Zdbs_computed() ZDBComputedArrayOutput {
	return o.ApplyT(func(v *Deployment) ZDBComputedArrayOutput { return v.Zdbs_computed }).(ZDBComputedArrayOutput)
}

type DeploymentArrayOutput struct{ *pulumi.OutputState }

func (DeploymentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Deployment)(nil)).Elem()
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutput() DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) ToDeploymentArrayOutputWithContext(ctx context.Context) DeploymentArrayOutput {
	return o
}

func (o DeploymentArrayOutput) Index(i pulumi.IntInput) DeploymentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].([]*Deployment)[vs[1].(int)]
	}).(DeploymentOutput)
}

type DeploymentMapOutput struct{ *pulumi.OutputState }

func (DeploymentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Deployment)(nil)).Elem()
}

func (o DeploymentMapOutput) ToDeploymentMapOutput() DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) ToDeploymentMapOutputWithContext(ctx context.Context) DeploymentMapOutput {
	return o
}

func (o DeploymentMapOutput) MapIndex(k pulumi.StringInput) DeploymentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Deployment {
		return vs[0].(map[string]*Deployment)[vs[1].(string)]
	}).(DeploymentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentArrayInput)(nil)).Elem(), DeploymentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentMapInput)(nil)).Elem(), DeploymentMap{})
	pulumi.RegisterOutputType(DeploymentOutput{})
	pulumi.RegisterOutputType(DeploymentArrayOutput{})
	pulumi.RegisterOutputType(DeploymentMapOutput{})
}
