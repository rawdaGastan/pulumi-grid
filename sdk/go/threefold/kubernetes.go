// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threefold

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/threefoldtech/pulumi-threefold/sdk/go/threefold/internal"
)

type Kubernetes struct {
	pulumi.CustomResourceState

	// The entry point for the flist. Example: /sbin/zinit init
	Entry_point pulumi.StringPtrOutput `pulumi:"entry_point"`
	// The flist to be mounted in the kubernetes cluster nodes. Example: https://hub.grid.tf/tf-official-apps/base:latest.flist
	Flist pulumi.StringPtrOutput `pulumi:"flist"`
	// The checksum of the flist which should match the checksum of the given flist, optional
	Flist_checksum pulumi.StringPtrOutput `pulumi:"flist_checksum"`
	// Master holds the configuration of master node in the kubernetes cluster
	Master K8sNodeInputOutput `pulumi:"master"`
	// The computed fields of the master node
	Master_computed VMComputedOutput `pulumi:"master_computed"`
	// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
	Network_name pulumi.StringOutput `pulumi:"network_name"`
	// Mapping from each node to its deployment ID
	Node_deployment_id pulumi.IntMapOutput `pulumi:"node_deployment_id"`
	// Computed values of nodes' IP ranges after deployment
	Nodes_ip_range pulumi.StringMapOutput `pulumi:"nodes_ip_range"`
	// The solution type of the cluster, displayed as project name in contract metadata
	Solution_type pulumi.StringPtrOutput `pulumi:"solution_type"`
	// SSH key to access the cluster nodes
	Ssh_key pulumi.StringPtrOutput `pulumi:"ssh_key"`
	// The cluster secret token. Each node has to have this token to be part of the cluster. This token should be an alphanumeric non-empty string
	Token pulumi.StringOutput `pulumi:"token"`
	// Workers is a list holding the workers configuration for the kubernetes cluster
	Workers K8sNodeInputArrayOutput `pulumi:"workers"`
	// List of the computed fields of the worker nodes
	Workers_computed VMComputedMapOutput `pulumi:"workers_computed"`
}

// NewKubernetes registers a new resource with the given unique name, arguments, and options.
func NewKubernetes(ctx *pulumi.Context,
	name string, args *KubernetesArgs, opts ...pulumi.ResourceOption) (*Kubernetes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Master == nil {
		return nil, errors.New("invalid value for required argument 'Master'")
	}
	if args.Network_name == nil {
		return nil, errors.New("invalid value for required argument 'Network_name'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Workers == nil {
		return nil, errors.New("invalid value for required argument 'Workers'")
	}
	args.Master = args.Master.ToK8sNodeInputOutput().ApplyT(func(v K8sNodeInput) K8sNodeInput { return *v.Defaults() }).(K8sNodeInputOutput)
	if args.Solution_type == nil {
		args.Solution_type = pulumi.StringPtr("kubernetes/")
	}
	if args.Ssh_key == nil {
		args.Ssh_key = pulumi.StringPtr("")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Kubernetes
	err := ctx.RegisterResource("threefold:index:Kubernetes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetes gets an existing Kubernetes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesState, opts ...pulumi.ResourceOption) (*Kubernetes, error) {
	var resource Kubernetes
	err := ctx.ReadResource("threefold:index:Kubernetes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kubernetes resources.
type kubernetesState struct {
}

type KubernetesState struct {
}

func (KubernetesState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesState)(nil)).Elem()
}

type kubernetesArgs struct {
	// The entry point for the flist. Example: /sbin/zinit init
	Entry_point *string `pulumi:"entry_point"`
	// The flist to be mounted in the kubernetes cluster nodes. Example: https://hub.grid.tf/tf-official-apps/base:latest.flist
	Flist *string `pulumi:"flist"`
	// The checksum of the flist which should match the checksum of the given flist, optional
	Flist_checksum *string `pulumi:"flist_checksum"`
	// Master holds the configuration of master node in the kubernetes cluster
	Master K8sNodeInput `pulumi:"master"`
	// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
	Network_name string `pulumi:"network_name"`
	// The solution type of the cluster, displayed as project name in contract metadata
	Solution_type *string `pulumi:"solution_type"`
	// SSH key to access the cluster nodes
	Ssh_key *string `pulumi:"ssh_key"`
	// The cluster secret token. Each node has to have this token to be part of the cluster. This token should be an alphanumeric non-empty string
	Token string `pulumi:"token"`
	// Workers is a list holding the workers configuration for the kubernetes cluster
	Workers []K8sNodeInput `pulumi:"workers"`
}

// The set of arguments for constructing a Kubernetes resource.
type KubernetesArgs struct {
	// The entry point for the flist. Example: /sbin/zinit init
	Entry_point pulumi.StringPtrInput
	// The flist to be mounted in the kubernetes cluster nodes. Example: https://hub.grid.tf/tf-official-apps/base:latest.flist
	Flist pulumi.StringPtrInput
	// The checksum of the flist which should match the checksum of the given flist, optional
	Flist_checksum pulumi.StringPtrInput
	// Master holds the configuration of master node in the kubernetes cluster
	Master K8sNodeInputInput
	// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
	Network_name pulumi.StringInput
	// The solution type of the cluster, displayed as project name in contract metadata
	Solution_type pulumi.StringPtrInput
	// SSH key to access the cluster nodes
	Ssh_key pulumi.StringPtrInput
	// The cluster secret token. Each node has to have this token to be part of the cluster. This token should be an alphanumeric non-empty string
	Token pulumi.StringInput
	// Workers is a list holding the workers configuration for the kubernetes cluster
	Workers K8sNodeInputArrayInput
}

func (KubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesArgs)(nil)).Elem()
}

type KubernetesInput interface {
	pulumi.Input

	ToKubernetesOutput() KubernetesOutput
	ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput
}

func (*Kubernetes) ElementType() reflect.Type {
	return reflect.TypeOf((**Kubernetes)(nil)).Elem()
}

func (i *Kubernetes) ToKubernetesOutput() KubernetesOutput {
	return i.ToKubernetesOutputWithContext(context.Background())
}

func (i *Kubernetes) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOutput)
}

// KubernetesArrayInput is an input type that accepts KubernetesArray and KubernetesArrayOutput values.
// You can construct a concrete instance of `KubernetesArrayInput` via:
//
//	KubernetesArray{ KubernetesArgs{...} }
type KubernetesArrayInput interface {
	pulumi.Input

	ToKubernetesArrayOutput() KubernetesArrayOutput
	ToKubernetesArrayOutputWithContext(context.Context) KubernetesArrayOutput
}

type KubernetesArray []KubernetesInput

func (KubernetesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kubernetes)(nil)).Elem()
}

func (i KubernetesArray) ToKubernetesArrayOutput() KubernetesArrayOutput {
	return i.ToKubernetesArrayOutputWithContext(context.Background())
}

func (i KubernetesArray) ToKubernetesArrayOutputWithContext(ctx context.Context) KubernetesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesArrayOutput)
}

// KubernetesMapInput is an input type that accepts KubernetesMap and KubernetesMapOutput values.
// You can construct a concrete instance of `KubernetesMapInput` via:
//
//	KubernetesMap{ "key": KubernetesArgs{...} }
type KubernetesMapInput interface {
	pulumi.Input

	ToKubernetesMapOutput() KubernetesMapOutput
	ToKubernetesMapOutputWithContext(context.Context) KubernetesMapOutput
}

type KubernetesMap map[string]KubernetesInput

func (KubernetesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kubernetes)(nil)).Elem()
}

func (i KubernetesMap) ToKubernetesMapOutput() KubernetesMapOutput {
	return i.ToKubernetesMapOutputWithContext(context.Background())
}

func (i KubernetesMap) ToKubernetesMapOutputWithContext(ctx context.Context) KubernetesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesMapOutput)
}

type KubernetesOutput struct{ *pulumi.OutputState }

func (KubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kubernetes)(nil)).Elem()
}

func (o KubernetesOutput) ToKubernetesOutput() KubernetesOutput {
	return o
}

func (o KubernetesOutput) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return o
}

// The entry point for the flist. Example: /sbin/zinit init
func (o KubernetesOutput) Entry_point() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringPtrOutput { return v.Entry_point }).(pulumi.StringPtrOutput)
}

// The flist to be mounted in the kubernetes cluster nodes. Example: https://hub.grid.tf/tf-official-apps/base:latest.flist
func (o KubernetesOutput) Flist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringPtrOutput { return v.Flist }).(pulumi.StringPtrOutput)
}

// The checksum of the flist which should match the checksum of the given flist, optional
func (o KubernetesOutput) Flist_checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringPtrOutput { return v.Flist_checksum }).(pulumi.StringPtrOutput)
}

// Master holds the configuration of master node in the kubernetes cluster
func (o KubernetesOutput) Master() K8sNodeInputOutput {
	return o.ApplyT(func(v *Kubernetes) K8sNodeInputOutput { return v.Master }).(K8sNodeInputOutput)
}

// The computed fields of the master node
func (o KubernetesOutput) Master_computed() VMComputedOutput {
	return o.ApplyT(func(v *Kubernetes) VMComputedOutput { return v.Master_computed }).(VMComputedOutput)
}

// The name of the network, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported. Network must exist
func (o KubernetesOutput) Network_name() pulumi.StringOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringOutput { return v.Network_name }).(pulumi.StringOutput)
}

// Mapping from each node to its deployment ID
func (o KubernetesOutput) Node_deployment_id() pulumi.IntMapOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.IntMapOutput { return v.Node_deployment_id }).(pulumi.IntMapOutput)
}

// Computed values of nodes' IP ranges after deployment
func (o KubernetesOutput) Nodes_ip_range() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringMapOutput { return v.Nodes_ip_range }).(pulumi.StringMapOutput)
}

// The solution type of the cluster, displayed as project name in contract metadata
func (o KubernetesOutput) Solution_type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringPtrOutput { return v.Solution_type }).(pulumi.StringPtrOutput)
}

// SSH key to access the cluster nodes
func (o KubernetesOutput) Ssh_key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringPtrOutput { return v.Ssh_key }).(pulumi.StringPtrOutput)
}

// The cluster secret token. Each node has to have this token to be part of the cluster. This token should be an alphanumeric non-empty string
func (o KubernetesOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Kubernetes) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Workers is a list holding the workers configuration for the kubernetes cluster
func (o KubernetesOutput) Workers() K8sNodeInputArrayOutput {
	return o.ApplyT(func(v *Kubernetes) K8sNodeInputArrayOutput { return v.Workers }).(K8sNodeInputArrayOutput)
}

// List of the computed fields of the worker nodes
func (o KubernetesOutput) Workers_computed() VMComputedMapOutput {
	return o.ApplyT(func(v *Kubernetes) VMComputedMapOutput { return v.Workers_computed }).(VMComputedMapOutput)
}

type KubernetesArrayOutput struct{ *pulumi.OutputState }

func (KubernetesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kubernetes)(nil)).Elem()
}

func (o KubernetesArrayOutput) ToKubernetesArrayOutput() KubernetesArrayOutput {
	return o
}

func (o KubernetesArrayOutput) ToKubernetesArrayOutputWithContext(ctx context.Context) KubernetesArrayOutput {
	return o
}

func (o KubernetesArrayOutput) Index(i pulumi.IntInput) KubernetesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Kubernetes {
		return vs[0].([]*Kubernetes)[vs[1].(int)]
	}).(KubernetesOutput)
}

type KubernetesMapOutput struct{ *pulumi.OutputState }

func (KubernetesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kubernetes)(nil)).Elem()
}

func (o KubernetesMapOutput) ToKubernetesMapOutput() KubernetesMapOutput {
	return o
}

func (o KubernetesMapOutput) ToKubernetesMapOutputWithContext(ctx context.Context) KubernetesMapOutput {
	return o
}

func (o KubernetesMapOutput) MapIndex(k pulumi.StringInput) KubernetesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Kubernetes {
		return vs[0].(map[string]*Kubernetes)[vs[1].(string)]
	}).(KubernetesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesInput)(nil)).Elem(), &Kubernetes{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesArrayInput)(nil)).Elem(), KubernetesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesMapInput)(nil)).Elem(), KubernetesMap{})
	pulumi.RegisterOutputType(KubernetesOutput{})
	pulumi.RegisterOutputType(KubernetesArrayOutput{})
	pulumi.RegisterOutputType(KubernetesMapOutput{})
}
