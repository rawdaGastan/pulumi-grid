// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threefold

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/threefoldtech/pulumi-threefold/sdk/go/threefold/internal"
)

type Network struct {
	pulumi.CustomResourceState

	// Generated wireguard configuration for external user access to the network
	Access_wg_config pulumi.StringOutput `pulumi:"access_wg_config"`
	// A flag to support wireguard in the network
	Add_wg_access pulumi.BoolPtrOutput `pulumi:"add_wg_access"`
	// The description of the network workload, optional with no restrictions
	Description pulumi.StringOutput `pulumi:"description"`
	// Wireguard IP assigned for external user access
	External_ip pulumi.StringOutput `pulumi:"external_ip"`
	// External user private key used in encryption while communicating through Wireguard network
	External_sk pulumi.StringOutput `pulumi:"external_sk"`
	// The IP range for the network, subnet should be 16
	Ip_range pulumi.StringOutput `pulumi:"ip_range"`
	// A flag to generate a random mycelium key to support mycelium in the network
	Mycelium pulumi.BoolPtrOutput `pulumi:"mycelium"`
	// A map of nodes as a key and mycelium key for each node, mycelium key length should be 32. Selected nodes must be included in the network's nodes
	Mycelium_keys pulumi.StringMapOutput `pulumi:"mycelium_keys"`
	// The name of the network workload, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
	Name pulumi.StringOutput `pulumi:"name"`
	// Mapping from each node to its deployment id
	Node_deployment_id pulumi.IntMapOutput `pulumi:"node_deployment_id"`
	// The nodes used to deploy the network on, shouldn't be empty
	Nodes pulumi.ArrayOutput `pulumi:"nodes"`
	// Computed values of nodes' IP ranges after deployment
	Nodes_ip_range pulumi.StringMapOutput `pulumi:"nodes_ip_range"`
	// Public node id (in case it's added). Used for wireguard access and supporting hidden nodes
	Public_node_id pulumi.IntOutput `pulumi:"public_node_id"`
	// The solution type of the network, displayed as project name in contract metadata
	Solution_type pulumi.StringPtrOutput `pulumi:"solution_type"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Ip_range == nil {
		return nil, errors.New("invalid value for required argument 'Ip_range'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.Solution_type == nil {
		args.Solution_type = pulumi.StringPtr("Network")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("threefold:index:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("threefold:index:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
}

type NetworkState struct {
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// A flag to support wireguard in the network
	Add_wg_access *bool `pulumi:"add_wg_access"`
	// The description of the network workload, optional with no restrictions
	Description string `pulumi:"description"`
	// The IP range for the network, subnet should be 16
	Ip_range string `pulumi:"ip_range"`
	// A flag to generate a random mycelium key to support mycelium in the network
	Mycelium *bool `pulumi:"mycelium"`
	// A map of nodes as a key and mycelium key for each node, mycelium key length should be 32. Selected nodes must be included in the network's nodes
	Mycelium_keys map[string]string `pulumi:"mycelium_keys"`
	// The name of the network workload, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
	Name string `pulumi:"name"`
	// The nodes used to deploy the network on, shouldn't be empty
	Nodes []interface{} `pulumi:"nodes"`
	// The solution type of the network, displayed as project name in contract metadata
	Solution_type *string `pulumi:"solution_type"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// A flag to support wireguard in the network
	Add_wg_access pulumi.BoolPtrInput
	// The description of the network workload, optional with no restrictions
	Description pulumi.StringInput
	// The IP range for the network, subnet should be 16
	Ip_range pulumi.StringInput
	// A flag to generate a random mycelium key to support mycelium in the network
	Mycelium pulumi.BoolPtrInput
	// A map of nodes as a key and mycelium key for each node, mycelium key length should be 32. Selected nodes must be included in the network's nodes
	Mycelium_keys pulumi.StringMapInput
	// The name of the network workload, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
	Name pulumi.StringInput
	// The nodes used to deploy the network on, shouldn't be empty
	Nodes pulumi.ArrayInput
	// The solution type of the network, displayed as project name in contract metadata
	Solution_type pulumi.StringPtrInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// Generated wireguard configuration for external user access to the network
func (o NetworkOutput) Access_wg_config() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Access_wg_config }).(pulumi.StringOutput)
}

// A flag to support wireguard in the network
func (o NetworkOutput) Add_wg_access() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.Add_wg_access }).(pulumi.BoolPtrOutput)
}

// The description of the network workload, optional with no restrictions
func (o NetworkOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Wireguard IP assigned for external user access
func (o NetworkOutput) External_ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.External_ip }).(pulumi.StringOutput)
}

// External user private key used in encryption while communicating through Wireguard network
func (o NetworkOutput) External_sk() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.External_sk }).(pulumi.StringOutput)
}

// The IP range for the network, subnet should be 16
func (o NetworkOutput) Ip_range() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Ip_range }).(pulumi.StringOutput)
}

// A flag to generate a random mycelium key to support mycelium in the network
func (o NetworkOutput) Mycelium() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.Mycelium }).(pulumi.BoolPtrOutput)
}

// A map of nodes as a key and mycelium key for each node, mycelium key length should be 32. Selected nodes must be included in the network's nodes
func (o NetworkOutput) Mycelium_keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Network) pulumi.StringMapOutput { return v.Mycelium_keys }).(pulumi.StringMapOutput)
}

// The name of the network workload, it's required and cannot exceed 50 characters. Only alphanumeric and underscores characters are supported
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Mapping from each node to its deployment id
func (o NetworkOutput) Node_deployment_id() pulumi.IntMapOutput {
	return o.ApplyT(func(v *Network) pulumi.IntMapOutput { return v.Node_deployment_id }).(pulumi.IntMapOutput)
}

// The nodes used to deploy the network on, shouldn't be empty
func (o NetworkOutput) Nodes() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.ArrayOutput { return v.Nodes }).(pulumi.ArrayOutput)
}

// Computed values of nodes' IP ranges after deployment
func (o NetworkOutput) Nodes_ip_range() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Network) pulumi.StringMapOutput { return v.Nodes_ip_range }).(pulumi.StringMapOutput)
}

// Public node id (in case it's added). Used for wireguard access and supporting hidden nodes
func (o NetworkOutput) Public_node_id() pulumi.IntOutput {
	return o.ApplyT(func(v *Network) pulumi.IntOutput { return v.Public_node_id }).(pulumi.IntOutput)
}

// The solution type of the network, displayed as project name in contract metadata
func (o NetworkOutput) Solution_type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Solution_type }).(pulumi.StringPtrOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
