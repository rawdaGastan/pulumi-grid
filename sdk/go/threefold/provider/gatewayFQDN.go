// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package provider

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/threefoldtech/pulumi-threefold/sdk/go/threefold/internal"
)

type GatewayFQDN struct {
	pulumi.CustomResourceState

	Backends           pulumi.StringArrayOutput `pulumi:"backends"`
	Contract_id        pulumi.IntOutput         `pulumi:"contract_id"`
	Description        pulumi.StringPtrOutput   `pulumi:"description"`
	Fqdn               pulumi.StringOutput      `pulumi:"fqdn"`
	Name               pulumi.StringOutput      `pulumi:"name"`
	Network_name       pulumi.StringPtrOutput   `pulumi:"network_name"`
	Node_deployment_id pulumi.IntMapOutput      `pulumi:"node_deployment_id"`
	Node_id            pulumi.AnyOutput         `pulumi:"node_id"`
	Solution_type      pulumi.StringPtrOutput   `pulumi:"solution_type"`
	Tls_pass_through   pulumi.BoolPtrOutput     `pulumi:"tls_pass_through"`
}

// NewGatewayFQDN registers a new resource with the given unique name, arguments, and options.
func NewGatewayFQDN(ctx *pulumi.Context,
	name string, args *GatewayFQDNArgs, opts ...pulumi.ResourceOption) (*GatewayFQDN, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backends == nil {
		return nil, errors.New("invalid value for required argument 'Backends'")
	}
	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Node_id == nil {
		return nil, errors.New("invalid value for required argument 'Node_id'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayFQDN
	err := ctx.RegisterResource("threefold:provider:GatewayFQDN", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayFQDN gets an existing GatewayFQDN resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayFQDN(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayFQDNState, opts ...pulumi.ResourceOption) (*GatewayFQDN, error) {
	var resource GatewayFQDN
	err := ctx.ReadResource("threefold:provider:GatewayFQDN", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayFQDN resources.
type gatewayFQDNState struct {
}

type GatewayFQDNState struct {
}

func (GatewayFQDNState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayFQDNState)(nil)).Elem()
}

type gatewayFQDNArgs struct {
	Backends         []string    `pulumi:"backends"`
	Description      *string     `pulumi:"description"`
	Fqdn             string      `pulumi:"fqdn"`
	Name             string      `pulumi:"name"`
	Network_name     *string     `pulumi:"network_name"`
	Node_id          interface{} `pulumi:"node_id"`
	Solution_type    *string     `pulumi:"solution_type"`
	Tls_pass_through *bool       `pulumi:"tls_pass_through"`
}

// The set of arguments for constructing a GatewayFQDN resource.
type GatewayFQDNArgs struct {
	Backends         pulumi.StringArrayInput
	Description      pulumi.StringPtrInput
	Fqdn             pulumi.StringInput
	Name             pulumi.StringInput
	Network_name     pulumi.StringPtrInput
	Node_id          pulumi.Input
	Solution_type    pulumi.StringPtrInput
	Tls_pass_through pulumi.BoolPtrInput
}

func (GatewayFQDNArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayFQDNArgs)(nil)).Elem()
}

type GatewayFQDNInput interface {
	pulumi.Input

	ToGatewayFQDNOutput() GatewayFQDNOutput
	ToGatewayFQDNOutputWithContext(ctx context.Context) GatewayFQDNOutput
}

func (*GatewayFQDN) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayFQDN)(nil)).Elem()
}

func (i *GatewayFQDN) ToGatewayFQDNOutput() GatewayFQDNOutput {
	return i.ToGatewayFQDNOutputWithContext(context.Background())
}

func (i *GatewayFQDN) ToGatewayFQDNOutputWithContext(ctx context.Context) GatewayFQDNOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayFQDNOutput)
}

func (i *GatewayFQDN) ToOutput(ctx context.Context) pulumix.Output[*GatewayFQDN] {
	return pulumix.Output[*GatewayFQDN]{
		OutputState: i.ToGatewayFQDNOutputWithContext(ctx).OutputState,
	}
}

// GatewayFQDNArrayInput is an input type that accepts GatewayFQDNArray and GatewayFQDNArrayOutput values.
// You can construct a concrete instance of `GatewayFQDNArrayInput` via:
//
//	GatewayFQDNArray{ GatewayFQDNArgs{...} }
type GatewayFQDNArrayInput interface {
	pulumi.Input

	ToGatewayFQDNArrayOutput() GatewayFQDNArrayOutput
	ToGatewayFQDNArrayOutputWithContext(context.Context) GatewayFQDNArrayOutput
}

type GatewayFQDNArray []GatewayFQDNInput

func (GatewayFQDNArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayFQDN)(nil)).Elem()
}

func (i GatewayFQDNArray) ToGatewayFQDNArrayOutput() GatewayFQDNArrayOutput {
	return i.ToGatewayFQDNArrayOutputWithContext(context.Background())
}

func (i GatewayFQDNArray) ToGatewayFQDNArrayOutputWithContext(ctx context.Context) GatewayFQDNArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayFQDNArrayOutput)
}

func (i GatewayFQDNArray) ToOutput(ctx context.Context) pulumix.Output[[]*GatewayFQDN] {
	return pulumix.Output[[]*GatewayFQDN]{
		OutputState: i.ToGatewayFQDNArrayOutputWithContext(ctx).OutputState,
	}
}

// GatewayFQDNMapInput is an input type that accepts GatewayFQDNMap and GatewayFQDNMapOutput values.
// You can construct a concrete instance of `GatewayFQDNMapInput` via:
//
//	GatewayFQDNMap{ "key": GatewayFQDNArgs{...} }
type GatewayFQDNMapInput interface {
	pulumi.Input

	ToGatewayFQDNMapOutput() GatewayFQDNMapOutput
	ToGatewayFQDNMapOutputWithContext(context.Context) GatewayFQDNMapOutput
}

type GatewayFQDNMap map[string]GatewayFQDNInput

func (GatewayFQDNMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayFQDN)(nil)).Elem()
}

func (i GatewayFQDNMap) ToGatewayFQDNMapOutput() GatewayFQDNMapOutput {
	return i.ToGatewayFQDNMapOutputWithContext(context.Background())
}

func (i GatewayFQDNMap) ToGatewayFQDNMapOutputWithContext(ctx context.Context) GatewayFQDNMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayFQDNMapOutput)
}

func (i GatewayFQDNMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*GatewayFQDN] {
	return pulumix.Output[map[string]*GatewayFQDN]{
		OutputState: i.ToGatewayFQDNMapOutputWithContext(ctx).OutputState,
	}
}

type GatewayFQDNOutput struct{ *pulumi.OutputState }

func (GatewayFQDNOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayFQDN)(nil)).Elem()
}

func (o GatewayFQDNOutput) ToGatewayFQDNOutput() GatewayFQDNOutput {
	return o
}

func (o GatewayFQDNOutput) ToGatewayFQDNOutputWithContext(ctx context.Context) GatewayFQDNOutput {
	return o
}

func (o GatewayFQDNOutput) ToOutput(ctx context.Context) pulumix.Output[*GatewayFQDN] {
	return pulumix.Output[*GatewayFQDN]{
		OutputState: o.OutputState,
	}
}

func (o GatewayFQDNOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.StringArrayOutput { return v.Backends }).(pulumi.StringArrayOutput)
}

func (o GatewayFQDNOutput) Contract_id() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.IntOutput { return v.Contract_id }).(pulumi.IntOutput)
}

func (o GatewayFQDNOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GatewayFQDNOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

func (o GatewayFQDNOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GatewayFQDNOutput) Network_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.StringPtrOutput { return v.Network_name }).(pulumi.StringPtrOutput)
}

func (o GatewayFQDNOutput) Node_deployment_id() pulumi.IntMapOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.IntMapOutput { return v.Node_deployment_id }).(pulumi.IntMapOutput)
}

func (o GatewayFQDNOutput) Node_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.AnyOutput { return v.Node_id }).(pulumi.AnyOutput)
}

func (o GatewayFQDNOutput) Solution_type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.StringPtrOutput { return v.Solution_type }).(pulumi.StringPtrOutput)
}

func (o GatewayFQDNOutput) Tls_pass_through() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewayFQDN) pulumi.BoolPtrOutput { return v.Tls_pass_through }).(pulumi.BoolPtrOutput)
}

type GatewayFQDNArrayOutput struct{ *pulumi.OutputState }

func (GatewayFQDNArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayFQDN)(nil)).Elem()
}

func (o GatewayFQDNArrayOutput) ToGatewayFQDNArrayOutput() GatewayFQDNArrayOutput {
	return o
}

func (o GatewayFQDNArrayOutput) ToGatewayFQDNArrayOutputWithContext(ctx context.Context) GatewayFQDNArrayOutput {
	return o
}

func (o GatewayFQDNArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*GatewayFQDN] {
	return pulumix.Output[[]*GatewayFQDN]{
		OutputState: o.OutputState,
	}
}

func (o GatewayFQDNArrayOutput) Index(i pulumi.IntInput) GatewayFQDNOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayFQDN {
		return vs[0].([]*GatewayFQDN)[vs[1].(int)]
	}).(GatewayFQDNOutput)
}

type GatewayFQDNMapOutput struct{ *pulumi.OutputState }

func (GatewayFQDNMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayFQDN)(nil)).Elem()
}

func (o GatewayFQDNMapOutput) ToGatewayFQDNMapOutput() GatewayFQDNMapOutput {
	return o
}

func (o GatewayFQDNMapOutput) ToGatewayFQDNMapOutputWithContext(ctx context.Context) GatewayFQDNMapOutput {
	return o
}

func (o GatewayFQDNMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*GatewayFQDN] {
	return pulumix.Output[map[string]*GatewayFQDN]{
		OutputState: o.OutputState,
	}
}

func (o GatewayFQDNMapOutput) MapIndex(k pulumi.StringInput) GatewayFQDNOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayFQDN {
		return vs[0].(map[string]*GatewayFQDN)[vs[1].(string)]
	}).(GatewayFQDNOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayFQDNInput)(nil)).Elem(), &GatewayFQDN{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayFQDNArrayInput)(nil)).Elem(), GatewayFQDNArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayFQDNMapInput)(nil)).Elem(), GatewayFQDNMap{})
	pulumi.RegisterOutputType(GatewayFQDNOutput{})
	pulumi.RegisterOutputType(GatewayFQDNArrayOutput{})
	pulumi.RegisterOutputType(GatewayFQDNMapOutput{})
}
