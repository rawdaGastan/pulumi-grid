// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package provider

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/threefoldtech/pulumi-threefold/sdk/go/threefold/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "threefold:provider:Deployment":
		r = &Deployment{}
	case "threefold:provider:GatewayFQDN":
		r = &GatewayFQDN{}
	case "threefold:provider:GatewayName":
		r = &GatewayName{}
	case "threefold:provider:Kubernetes":
		r = &Kubernetes{}
	case "threefold:provider:Network":
		r = &Network{}
	case "threefold:provider:Scheduler":
		r = &Scheduler{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"threefold",
		"provider",
		&module{version},
	)
}
