// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package threefold

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/threefoldtech/pulumi-threefold/sdk/go/threefold/internal"
)

type Provider struct {
	pulumi.ProviderResourceState

	// The key type registered on substrate (ed25519 or sr25519).
	Key_type pulumi.StringPtrOutput `pulumi:"key_type"`
	// The mnemonic of the user. It is very secret.
	Mnemonic pulumi.StringPtrOutput `pulumi:"mnemonic"`
	// The network to deploy on.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// The relay url, example: wss://relay.dev.grid.tf
	Relay_url pulumi.StringPtrOutput `pulumi:"relay_url"`
	// The timeout duration in seconds for rmb calls
	Rmb_timeout pulumi.StringPtrOutput `pulumi:"rmb_timeout"`
	// The substrate url, example: wss://tfchain.dev.grid.tf/ws
	Substrate_url pulumi.StringPtrOutput `pulumi:"substrate_url"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Key_type == nil {
		if d := internal.GetEnvOrDefault("sr25519", nil, ""); d != nil {
			args.Key_type = pulumi.StringPtr(d.(string))
		}
	}
	if args.Mnemonic == nil {
		if d := internal.GetEnvOrDefault("", nil, ""); d != nil {
			args.Mnemonic = pulumi.StringPtr(d.(string))
		}
	}
	if args.Network == nil {
		if d := internal.GetEnvOrDefault("", nil, ""); d != nil {
			args.Network = pulumi.StringPtr(d.(string))
		}
	}
	if args.Mnemonic != nil {
		args.Mnemonic = pulumi.ToSecret(args.Mnemonic).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"mnemonic",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:threefold", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The key type registered on substrate (ed25519 or sr25519).
	Key_type *string `pulumi:"key_type"`
	// The mnemonic of the user. It is very secret.
	Mnemonic *string `pulumi:"mnemonic"`
	// The network to deploy on.
	Network *string `pulumi:"network"`
	// The relay url, example: wss://relay.dev.grid.tf
	Relay_url *string `pulumi:"relay_url"`
	// The timeout duration in seconds for rmb calls
	Rmb_timeout *string `pulumi:"rmb_timeout"`
	// The substrate url, example: wss://tfchain.dev.grid.tf/ws
	Substrate_url *string `pulumi:"substrate_url"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The key type registered on substrate (ed25519 or sr25519).
	Key_type pulumi.StringPtrInput
	// The mnemonic of the user. It is very secret.
	Mnemonic pulumi.StringPtrInput
	// The network to deploy on.
	Network pulumi.StringPtrInput
	// The relay url, example: wss://relay.dev.grid.tf
	Relay_url pulumi.StringPtrInput
	// The timeout duration in seconds for rmb calls
	Rmb_timeout pulumi.StringPtrInput
	// The substrate url, example: wss://tfchain.dev.grid.tf/ws
	Substrate_url pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: i.ToProviderOutputWithContext(ctx).OutputState,
	}
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: o.OutputState,
	}
}

// The key type registered on substrate (ed25519 or sr25519).
func (o ProviderOutput) Key_type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Key_type }).(pulumi.StringPtrOutput)
}

// The mnemonic of the user. It is very secret.
func (o ProviderOutput) Mnemonic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Mnemonic }).(pulumi.StringPtrOutput)
}

// The network to deploy on.
func (o ProviderOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// The relay url, example: wss://relay.dev.grid.tf
func (o ProviderOutput) Relay_url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Relay_url }).(pulumi.StringPtrOutput)
}

// The timeout duration in seconds for rmb calls
func (o ProviderOutput) Rmb_timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Rmb_timeout }).(pulumi.StringPtrOutput)
}

// The substrate url, example: wss://tfchain.dev.grid.tf/ws
func (o ProviderOutput) Substrate_url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Substrate_url }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
